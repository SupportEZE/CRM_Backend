name: Build, Scan, and Deploy

on:
  workflow_dispatch:
    inputs:
      action_type:
        description: "Enter 'scan' for code scan or 'deploy' for deployment"
        required: true
      folder_name:
        description: "Folder Name (Required for deploy)"
        required: false
      deploy_env:
        description: "Enter 'development' or 'production' (Required for deploy)"
        required: false

jobs:
  conditional-job:
    runs-on: ubuntu-latest
    steps:
      - name: ⏳ Check Inputs
        id: check
        run: |
          echo "Action Type: ${{ github.event.inputs.action_type }}"
          echo "Environment: ${{ github.event.inputs.deploy_env }}"
          
          if [[ "${{ github.event.inputs.action_type }}" == "deploy" ]]; then
            if [[ -z "${{ github.event.inputs.folder_name }}" ]]; then
              echo "❌ folder_name is required for deployment."
              exit 1
            fi
            if [[ -z "${{ github.event.inputs.deploy_env }}" ]]; then
              echo "❌ deploy_env is required for deployment."
              exit 1
            fi
            if [[ "${{ github.event.inputs.deploy_env }}" != "development" && "${{ github.event.inputs.deploy_env }}" != "production" ]]; then
              echo "❌ deploy_env must be 'development' or 'production'."
              exit 1
            fi
          fi
          echo "✅ Input validation passed."

  validate-client-folder:
    needs: conditional-job
    if: ${{ github.event.inputs.action_type == 'deploy' }}
    runs-on: ubuntu-latest
    steps:
      - name: 🌐 Set deployment host
        id: setvars
        run: |
          if [[ "${{ github.event.inputs.deploy_env }}" == "development" ]]; then
            echo "host=43.204.204.109" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.deploy_env }}" == "production" ]]; then
            echo "host=52.66.51.37" >> $GITHUB_OUTPUT
          fi

      - name: 🚫 Validate client folder exists on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.setvars.outputs.host }}
          username: ec2-user
          port: 22786
          key: ${{ github.event.inputs.deploy_env == 'production' && secrets.SSH_PROD_KEY || secrets.SSH_PRIVATE_KEY }}
          script: |
            FOLDER_NAME="${{ github.event.inputs.folder_name }}"
            if [ ! -d "/var/www/html/$FOLDER_NAME" ]; then
              echo "❌ ERROR: Client folder '/var/www/html/$FOLDER_NAME' does not exist."
              exit 1
            else
              echo "✅ BACKEND folder '$FOLDER_NAME' exists."
            fi

  deploy-job:
    needs: validate-client-folder
    if: ${{ github.event.inputs.action_type == 'deploy' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 🌐 Set deployment host
        id: setvars
        run: |
          if [[ "${{ github.event.inputs.deploy_env }}" == "development" ]]; then
            echo "host=43.204.204.109" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.deploy_env }}" == "production" ]]; then
            echo "host=52.66.51.37" >> $GITHUB_OUTPUT
          fi

      - name: 📦 Install dependencies
        run: npm install

      - name: 🛠️ Build NestJS app with extended memory
        run: node --max-old-space-size=4096 ./node_modules/.bin/nest build

      - name: 📦 Zip build
        run: zip -r build.zip dist/

      - name: ☁️ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: build.zip
          retention-days: 2

      - name: 📦 Copy to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.setvars.outputs.host }}
          username: ec2-user
          port: 22786
          key: ${{ github.event.inputs.deploy_env == 'production' && secrets.SSH_PROD_KEY || secrets.SSH_PRIVATE_KEY }}
          source: build.zip
          target: /home/ec2-user/backend

      - name: 🚀 Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.setvars.outputs.host }}
          username: ec2-user
          port: 22786
          key: ${{ github.event.inputs.deploy_env == 'production' && secrets.SSH_PROD_KEY || secrets.SSH_PRIVATE_KEY }}
          script: |
            FOLDER_NAME="${{ github.event.inputs.folder_name }}"
            TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
            BACKUP_DIR="/home/ec2-user/backend/${FOLDER_NAME}_dist_backup_$TIMESTAMP"

            echo "📁 Backing up existing deployment to $BACKUP_DIR ..."
            if [ -d "/var/www/html/$FOLDER_NAME" ]; then
              cp -r /var/www/html/$FOLDER_NAME/dist "$BACKUP_DIR"
              echo "✅ Backup complete."
            else
              echo "⚠️ Warning: No existing folder to backup."
            fi

            echo "📦 Unzipping new build and deploying..."
            cd /home/ec2-user/backend
            unzip -o build.zip
            cp -r dist/* /var/www/html/$FOLDER_NAME/dist/
            echo "🚀 Deployment complete."

            sudo su - -c "pm2 restart api"

  scan-job:
    needs: conditional-job
    if: ${{ github.event.inputs.action_type == 'scan' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: 📦 Install dependencies (no lock file fallback)
        run: npm install
          
      - name: 🔍 Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip
          export PATH="$PWD/sonar-scanner-5.0.1.3006-linux/bin:$PATH"
          sonar-scanner \
            -Dsonar.projectKey=CRM-Tailwind \
            -Dsonar.sources=src \
            -Dsonar.host.url=http://13.203.181.169:9000 \
            -Dsonar.login=$SONAR_TOKEN

      - name: 🛡️ Run Bearer scan
        run: |
          curl -sSLo bearer.tar.gz https://github.com/Bearer/bearer/releases/download/v1.49.0/bearer_1.49.0_linux_amd64.tar.gz
          tar -xzf bearer.tar.gz
          chmod +x bearer
          ./bearer scan . --format sarif --output bearer-report.sarif || true

      - name: 📤 Upload Bearer Report
        uses: actions/upload-artifact@v4
        with:
          name: bearer-report
          path: bearer-report.sarif

      - name: 📧 Email scan reports
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Code Scan Reports - Sonar & Bearer
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
          secure: false
          attachments: bearer-report.sarif
          body: |
            Hello,

            Code Quality and Security scan has been done. Please check the reports:
            - Sonar: http://13.203.181.169:9000/dashboard?id=CRM-Tailwind
            - Bearer: Attached.

            Regards,
            CI/CD Bot
